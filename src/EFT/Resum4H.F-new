* Resum4H.F
* resums the 4H coupling taking into account four scales:
*   low scale = MT
*   medium scale 1 = MCha
*   medium scale 2 = MGlu
*   high scale = MSUSY
* this file is part of FeynHiggs
* last modified 14 Sep 15 th

#include "externals.h"
#include "types.h"


* Main function calculating the correction to Mh due to resummation

	subroutine Resum4H(dPhi22)
	implicit none
	RealType dPhi22

#include "Resum4H.h"

	integer fail
	RealType x(nSM:nSplit)
	RealType MTy2, MSUSY2, gMT2, gyMT2, htMT2
	RealType g1uC, g1dC, g1udC, g2uC, g2dC, g2udC, htC, lC
	RealType subnonlog, sublog2L, sublog1L
	external threshdiff

	RealType z, Mh2al

	htMT = .955693D0
	g3MT = 1.1666D0
	gMT  = .6482D0
	gyMT = .3576D0

	gMT2 = gMT**2
	gyMT2 = gyMT**2
	htMT2 = htMT**2

	MTy2 = Mf2(tT,3)
	tTop = log(MTy2)
	tCha = log(MCha(1)*MCha(2))
	tGlu = log(MGl2)
	MSUSY2 = MSf(1,3,3)*MSf(2,3,3)
	tSUSY = log(MSUSY2)

#define XtOS Re(Xtc)
	xOS = XtOS**2/MSUSY2
	xMS = xOS*(1 + cL*( 4*g3MT**2 +
     &    1/6D0*(26*CW2 - 1)*SW2*MW2/vev**2 +
     &    .75D0*htMT2*(xOS - 1) )*(tSUSY - tTop))**2

* initial values from tree-level relations
	x(ilam) = .25D0
	x(ig1u) = gyMT*SB
	x(ig1d) = gyMT*CB
	x(ig2u) = gMT*SB
	x(ig2d) = gMT*CB

* solve for x using Newton procedure
	call FindMinimum(fail, threshdiff, x(ilam), nSplit - nSM + 1)

#include "FOSubtract.h"

* calc Mh^RGE, combine with subtraction terms
	dPhi22 = vev**2*x(ilam) - subnonlog - sublog2L - sublog1L

	if( debuglevel .gt. 4 ) then
	  DHIGGS "final values:"
	  DHIGGS "lam(MT)   =", x(ilam)		ENDL
	  DHIGGS "subnonlog =", subnonlog	ENDL
	  DHIGGS "sublog2L  =", sublog2L	ENDL
	  DHIGGS "sublog1L  =", sublog1L	ENDL
	  DHIGGS "dPhi22    =", dPhi22		ENDL
	endif

	z = MT2/MSUSY2
	PRINT *, "XtOS=", XtOS
	PRINT *, "xOS=", xOS
	PRINT *, "MSUSY=", sqrt(MSUSY2)
	PRINT *, "z=", z
	Mh2al = 1.5D0*sqrt2/Pi**2*GF*MT2**2 * (
     &    -log(z) +
     &    xOS*(1 - xOS/12D0 - z*(.5D0 - xOS/3D0 + .25D0*z*xOS)) )
	PRINT *, "Mh2al=", Mh2al
	PRINT *, "Mh=", sqrt(Mh02 + Mh2al)
	Mh2al = 1.5D0*sqrt2/Pi**2*GF*MT2**2 * (
     &    -log(z) +
     &    xOS*(1 - xOS/12D0 - 0*z*(.5D0 - xOS/3D0 + .25D0*z*xOS)) )
	PRINT *, "Mh2al=", Mh2al
	PRINT *, "Mh=", sqrt(Mh02 + Mh2al)
	end


************************************************************************
* threshdiff is the function which is minimized by FindMinimum.
* It takes n=5 input parameters (the guesses for lambda(MT) and
* the gaugino-gaugino-higgs couplings g[12][ud](MCha)) and uses
* them to run all couplings up to Q = MSUSY.
* At Q = MSUSY it checks how well the threshold corrections are
* fulfilled and saves the discrepancies in diff(1..5).
* |diff|^2 is given back to FindMinimum.

	subroutine threshdiff(n, x, dx, dxmin)
	implicit none
	integer n
	RealType x(nSM:nSplit), dx(nSM:nSplit), dxmin

#include "Resum4H.h"

	RealType y(nSplit)
	RealType yg1ud, yg2ud, y13
	RealType ySB, ySB2, yCB, yCB2, yTB1, yggy, dx2

	external betaSM2L, betaSplit2L

* known values at Q = MT
	y(ig) = gMT
	y(ig3) = g3MT
	y(igy) = gyMT
	y(iht) = htMT
	y(itb) = TB

	y(ilam) = x(ilam)

* run from Q = MT to Q = MCha with SM RGEs
	call ODESolve(nSM, betaSM2L, y, tTop, tCha, odeeps, odeh1)

	y(ig1d) = x(ig1d)
	y(ig1u) = x(ig1u)
	y(ig2d) = x(ig2d)
	y(ig2u) = x(ig2u)

* threshold conditions @ MCha
	yg1ud = y(ig1d) + y(ig1u)
	yg2ud = y(ig2d) + y(ig2u)
	y13 = yg1ud**2 + 3*yg2ud**2

	y(iht) = y(iht)*(1 - cL/12D0*y13)

	y(ilam) = (y(ilam) + cL/12D0*(
     &    (yg1ud - yg2ud)*(yg1ud + yg2ud)*
     &      (y13 + 6*(y(ig1d)**2 + y(ig1u)**2)) +
     &    6*yg2ud*(
     &      yg2ud*(yg1ud**2 + 5*(y(ig2d)**2 + y(ig2u)**2)) +
     &      2*(y(ig1d)**2*y(ig2d) + y(ig1u)**2*y(ig2u)) )
     &  ))/(1 + cL/3D0*y13)

* run from Q = MCha to Q = MSUSY with Split RGEs
	call ODESolve(nSplit, betaSplit2L, y, tCha, tSUSY, odeeps, odeh1)

* threshold conditions @ MSUSY
	yCB2 = 1/(1 + y(itb)**2)
	yCB = sqrt(yCB2)
	ySB = y(itb)*yCB
	ySB2 = ySB**2
	yTB1 = yCB2*(1 - y(itb))*(1 + y(itb))
	yggy = y(ig)**2 + y(igy)**2

	dx(ilam) = y(ilam) - .25D0*(yggy*yTB1**2 - cL*(
     &    2/3D0*y(ig)**4*(3 - yTB1**2) +
     &    yggy**2*(1 + 12*yCB2**2*y(itb)**2*yTB1**2) +
     &    y(iht)**2*xMS*(2*y(iht)**2*(xMS - 12) +
     &      yggy*yTB1*(yTB1 - 3))))
	dx2 = dx(ilam)**2

	dx(ig1d) = y(ig1d) - y(igy)*yCB*(1 + cL*
     &    ((7/16D0*ySB2 - 11/4D0)*y(igy)**2 + 
     &     (21/16D0*ySB2 - 3/8D0)*y(ig)**2))
	dx2 = dx2 + dx(ig1d)**2

	dx(ig2d) = y(ig2d) - y(ig)*yCB*(1 + cL*
     &    ((7/16D0*ySB2 - 1/8D0)*y(igy)**2 -
     &     (11/16D0*ySB2 + 2/3D0)*y(ig)**2))
	dx2 = dx2 + dx(ig2d)**2

	dx(ig1u) = y(ig1u) - y(igy)*ySB*(1 + cL*
     &    ((7/16D0*yCB2 - 11/4D0)*y(igy)**2 + 
     &     (21/16D0*yCB2 - 3/8D0)*y(ig)**2 +
     &     (3/2D0*y(iht)/ySB)**2))
	dx2 = dx2 + dx(ig1u)**2

	dx(ig2u) = y(ig2u) - y(ig)*ySB*(1 + cL*
     &    ((7/16D0*yCB2 - 1/8D0)*y(igy)**2 -
     &     (11/16D0*yCB2 + 2/3D0)*y(ig)**2 +
     &     (3/2D0*y(iht)/ySB)**2))
	dx2 = dx2 + dx(ig2u)**2

	dxmin = dx2
	end

