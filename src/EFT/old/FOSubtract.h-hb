* FOSubtract.h
* the fixed-order subtraction terms
* this file is part of FeynHiggs
* last modified 10 May 16 th


        g1uC = gyMT*SB*
     &    (1 - cL/80.D0*(15*(2 - 7*CB2)*gMT2 - 
     &         (4*(45*htMT2 + gyMT2*(-44*SB2 + 7/4.D0*S2B**2)))/SB2))

#ifdef DETAILED_DEBUG
	DHIGGS "g1uC =", g1uC ENDL
#endif

        g1dC = CB*gyMT*
     &    (1 - cL/80.D0*(gMT2*(30 - 105*SB2) + gyMT2*(176 - 28*SB2)))

#ifdef DETAILED_DEBUG
	DHIGGS "g1dC =", g1dC ENDL
#endif

        g2uC = gMT*SB*(1 + 
     &      cL/240.D0*(540*htMT2 + gyMT2*(21*S2B**2 - 24*SB2) - 
     &          gMT2*(160*SB2 + 165/4.D0*S2B**2))/SB2)

#ifdef DETAILED_DEBUG
	DHIGGS "g2uC =", g2uC ENDL
#endif

        g2dC = CB*gMT*(1 - 
     &      cL/240.D0*(gyMT2*(24 - 84*SB2) + gMT2*(160 + 165*SB2)))

#ifdef DETAILED_DEBUG
	DHIGGS "g2dC =", g2dC ENDL
#endif

        sublog2L = cL**2/2.D0*
     &    (htMT2**2*vev**2*(tSUSY - tTop)*
     &      (g3MT**2*(64 - 96*xOS**2) - 
     &        3*htMT2*(2 + xOS**2)*(10 - (8 - xOS**2)*xOS**2) - 
     &        (96*g3MT**2 - 18*htMT2)*(tSUSY - tTop)))

#ifdef DETAILED_DEBUG
	DHIGGS "sublog2L =", sublog2L ENDL
#endif

        sublog1L = 1/(24.D0*Pi)*
     &    (Alfa1L*(2*(10*C2B**2*MW2*MZ2 - 
     &            4*MW2**2*(8 - 5*S2B**2) - MZ2**2*(5 + S2B**2))*
     &          (tCha - tTop) + 
     &         (36*MTy2**2 + (18*C2B*MTy2 - 84*C2B**2*MW2)*MZ2 + 
     &            MW2**2*(68 - 62*S2B**2) + 
     &            3*MZ2**2*(14 - S2B**2*(10 + 3*S2B**2)))*
     &          (tSUSY - tTop)))/(MW2*SW2)

#ifdef DETAILED_DEBUG
	DHIGGS "sublog1L =", sublog1L ENDL
#endif

	g1udC = g1dC + g1uC

	g2udC = g2dC + g2uC

	htC = 1/12.D0*(htMT*(12 - cL*(g1udC**2 + 3*g2udC**2)))

#ifdef DETAILED_DEBUG
	DHIGGS "htC =", htC ENDL
#endif

        lC = 1/12.D0*((gMT2 + gyMT2)*
     &       (3*C2B**2*(1 + cL*((gMT2 + gyMT2)*S2B**2)) + 
     &         9*cL*(C2B*htC**2*xOS**2)) - 
     &      cL*(6*gMT2*gyMT2 + 3*gyMT2**2 + 
     &         gMT2**2*(7 + 2*S2B**2) - 6*htC**4*(12 - xOS**2)*xOS**2))

#ifdef DETAILED_DEBUG
	DHIGGS "lC =", lC ENDL
#endif

        subnonlog = 1/12.D0*
     &    (vev**2*(3*C2B**2*(gMT2 + gyMT2) - 
     &        cL*(7*(g1dC**4 + g1uC**4) + 
     &           16*g1dC*g1uC*(g1dC**2 + g1uC**2 + g2udC**2) + 
     &           2*(g1uC**2*g2udC*(6*g2uC + g2udC) + 
     &              g1dC**2*(9*g1uC**2 + 6*g2dC*g2udC + g2udC**2))-
     &             4*g1udC**2*lC + 
     &           gMT2**2*(7 + (2 + 9*C2B**2)*S2B**2) + 
     &           3*(g2udC**2*
     &               (g2dC*(9*g2dC - 2*g2uC) + 9*g2uC**2 - 4*lC) + 
     &              gyMT2*(2*gMT2 + gyMT2)*(1 + 3*C2B**2*S2B**2))-
     &             ((9 - 3*C2B)*C2B*(gMT2 + gyMT2)*htC**2 + 
     &              htC**4*(72 - 6*xOS**2))*xOS**2)))

#ifdef DETAILED_DEBUG
	DHIGGS "subnonlog =", subnonlog ENDL
#endif

	subnonlog2La = 0
	subnonlog2Lb = 0

	if( loglevel .gt. 2 ) then
* subtraction of 2L thresholds
	  subnonlog2La = -cL**2/12.D0*(htMT**4*vev**2*
     &         (16*g3MT2*SB2*
     &            (24*xOS + (11 + xOS*(-26 - 2*xOS1) + xOS1)*xOS2)+
     &             3*htMT**2*
     &            (CB2*(-((1 + xOS1)*yOS**2*
     &                    (1 + (-19 - 96*Kfac)*xOS1)) + 
     &                 48*xOS*yOS*
     &                  (xOS1*(1 + 4*Kfac) + (2 + 12*Kfac)) + 
     &                 3*((-9 - 144*Kfac - 4*pi**2) + 
     &                    xOS1*(10 - 96*Kfac + 25*xOS1))) - 
     &              6*(1 - 16*lfOS(1) + 
     &                 mueOS2*
     &                  (2*
     &                     (2*(3 - lfOS(1)) - 
     &                       (5 + xOS1)*xOS2*(1 + lfOS(1))) + 
     &                    (6 - xOS2*(11 + xOS1))*lfOS(2)) - 
     &                 xOS2*(14 - 8*lfOS(1) + 8*lfOS(2) - 
     &                    xOS2*(11 - SB2*xOS2 - lfOS(1) + lfOS(2))) + 
     &                 8*lfOS(3)))))/SB2

* subtraction of 2L terms from MS -> OS conversion of 1L MS result

	  if( abs(xOS1) .gt. 1D-12 ) then
	    if( abs(mueOS1) .gt. 1D-14 ) then
* Xt conversion	      
	      dup1 = mueOS + 1/2.D0*(S2B*xOS)
	      dup2 = mueOS2 + mueOS*S2B*xOS + SB2*xOS2
	      dup3 = -mueOS2 + mueOS**4*(1 - log(mueOS2))
	      dup4 = (-2*(sqrt2*Pi*dup1**2 - 1/2.D0*S2B**2))/S2B**2
              dup5 = (3 + 6*dup3 + CB2*(3 - (6 - 3*mueOS2)*mueOS2) + 
     &          16*SB2 - mueOS2*(6 + 32*SB2 - mueOS2*(3 + 16*SB2)))/
     &          (6 - (12 - 6*mueOS2)*mueOS2)
              dup6 = 1 - mueOS2 + (1 - mueOS**4)*log(abs(1 - mueOS2)) + 
     &          mueOS**4*log(mueOS2)
              dup7 = 3 + CB2*dup4 - 3*mueOS2 + (2*dup2)/SB2 - 
     &          (1 - mueOS2)**2*log(abs(1 - mueOS2)) 
     &          + mueOS**4*log(mueOS2)
              dup8 = 128*g3MT2 - 
     &          (xOS*(9*(dup5 + dup7)*htMT2 + 
     &          g3MT2*SB2*(-144 + 16*xOS)))/SB2 + 
     &          (2*htMT2*(CB*SB2*(36*mueOS - 6*Pi*(dup1*sqrt3)) + 
     &           SB*(-6*log2*SB2**2*xOS**3 + 
     &            xOS*(-9*dup6*SB2 - dup1**2*(9 - 2*Pi*sqrt3)) + 
     &            SB2*(54*xOS - 9*SB2*xOS**3*log(abs(xOS))))))/
     &          (SB*SB2**2)

              subnonlog2Lb = 
     &          -(1/12.D0*(htMT2*cL**2*.5D0*vev**2*xOS*
     &          (C2B**2*dup8*(gMT2 + gyMT2) - 
     &          4*(6*dup8*(htMT2 + 1/8.D0*(C2B*(gMT2 + gyMT2))) - 
     &             htMT2*xOS2*
     &              (128*g3MT2 - 
     &                (xOS*
     &                   (9*(dup5 + dup7)*htMT2 + 
     &                     g3MT2*SB2*(-144 + 16*xOS)))/SB2 + 
     &                (2*htMT2*
     &                   (CB*SB2*(36*mueOS - 6*Pi*(dup1*sqrt3)) + 
     &                     SB*
     &                      (-6*log2*SB2**2*xOS**3 + 
     &                       xOS*
     &                       (-9*dup6*SB2 - 
     &                       dup1**2*(9 - 2*Pi*sqrt3)) + 
     &                     SB2*(54*xOS - 9*SB2*xOS**3*log(abs(xOS)))))
     &                   )/(SB*SB2**2))))))
* MSusy conversion   
	      subnonlog2Lb = subnonlog2Lb -
     &            (cL**2*(-1152*htMT**4 - 
     &             288*C2B*(gMT2 + gyMT2)*htMT2 + 
     &             336*gMT2*(gMT2 + gyMT2)*
     &             (1 + CB2**2 - (3*S2B**2)/2D0 + SB2**2) - 
     &             8*gMT**4*(37 + 31*(CB2**2 - (3*S2B**2)/2D0 + 
     &             SB2**2)) + 3*(gMT2 + gyMT2)**2*
     &             (-63 + 3*CB2**4 - 84*CB2**3*SB2 - 52*SB2**2 + 
     &             3*SB2**4 + S2B**2*(78 - 21*SB2**2) + 
     &             CB2**2*(-52 + 210*SB2**2)))*
     &             .5D0*vev**2*(-64*g3MT**2 + 
     &             (9*htMT2*(3 - 3*mueOS2 + 
     &             (2*(CB2*mueOS2 + SB2*(mueOS2 + xOS2) + 
     &             mueOS*S2B*xOS))/SB2 + CB2*(1 - 
     &             (pi*(2*CB2*mueOS + 2*mueOS*SB2 + 
     &             S2B*xOS)**2)/(sqrt2*S2B**2)) - 
     &             (-1 + mueOS2)**2*log(abs(1 - mueOS2)) 
     &            + mueOS**4*log(mueOS2)))/
     &             SB2))/576.0D0
	    endif
	    
	    else
	      
              subnonlog2Lb = 
     &          1/96.D0*(htMT2*cL**2*.5D0*vev**2*xOS*
     &          (htMT2*(24 - 4*xOS2) + 
     &         (gMT2 + gyMT2)*
     &          ((3 - CB2)*CB2 - SB2*(3 + SB2) + 1/2.D0*S2B**2))*
     &         (128*g3MT2*SB2**2*(8 + 9*xOS - xOS2) + 
     &         htMT2*(-(S2B**2*xOS*
     &               (9*(3 + 4*xOS2) - 
     &                 Pi*(6*(3*sqrt2 - 4*sqrt3) + 
     &                    (9*sqrt2 + 8*sqrt3)*xOS2))) + 
     &            4*(S2B*(72*(1 - xOS2) + 
     &                  Pi*
     &                   (8*sqrt3*xOS2 - 
     &                     3*(4*sqrt3 - 3*sqrt2*xOS2))) + 
     &               xOS*(Pi*
     &                   (8*sqrt3 + 9*sqrt2*(CB2**2 + SB2**2))-
     &                    12*
     &                   (6 - 3*SB2*(6 - xOS2) + 
     &                     SB2**2*(4 + 2*xOS2*log2)))) - 
     &            144*SB2**2*xOS**3*log(abs(xOS)))))/SB2**2
* MSusy conversion    
	     subnonlog2Lb = subnonlog2Lb -
     &         (cL**2*(-1152*htMT**4 - 288*C2B*
     &         (gMT2 + gyMT2)*htMT2 + 336*gMT2*(gMT2 + gyMT2)*
     &         (1 + CB2**2 - (3*S2B**2)/2. + SB2**2) - 
     &         8*gMT**4*(37 + 31*(CB2**2 - (3*S2B**2)/2. + SB2**2)) + 
     &         3*(gMT2 + gyMT2)**2*(-63 + 3*CB2**4 - 84*CB2**3*SB2 - 
     &         52*SB2**2 + 3*SB2**4 + S2B**2*(78 - 21*SB2**2) + 
     &         CB2**2*(-52 + 210*SB2**2)))*.5D0*vev**2*(-144*
     &         sqrt2*CB2**3*htMT2*pi*SB2 - 
     &         144*sqrt2*CB2**2*htMT2*pi*S2B*SB2*xOS + 
     &         144*CB2*htMT2*S2B*(S2B - sqrt2*pi*SB2**2*xOS) + 
     &         S2B**2*(-512*g3MT**2*SB2**2 - 9*htMT2*(-16*S2B*xOS + 
     &            4*SB2*(sqrt2*pi*SB2 - 4*(1 + xOS2)) + 
     &            S2B**2*(-2 + sqrt2*pi*(2 + xOS2))))))/
     &         (4608*S2B**2*SB2**2) 
	    
	    endif
	 
	  else
	   
	    if( abs(mueOS1) .gt. 1D-12 ) then

	       subnonlog2Lb = subnonlog2Lb +
     &          (cL**2*(-1152*htMT**4 - 288*C2B*(gMT2 
     &          + gyMT2)*htMT2 + 
     &          336*gMT2*(gMT2 + gyMT2)*
     &          (1 + CB2**2 - (3*S2B**2)/2D0 + SB2**2) - 
     &          8*gMT**4*(37 + 31*(CB2**2 - (3*S2B**2)/2. + SB2**2))+ 
     &          3*(gMT2 + gyMT2)**2*
     &          (-63 + 3*CB2**4 - 84*CB2**3*SB2 - 52*SB2**2 
     &          + 3*SB2**4 +
     &          S2B**2*(78 - 21*SB2**2) + CB2**2*(-52 + 210*SB2**2)))*
     &          .5D0*vev**2*(-72*CB2*htMT2*mueOS2*S2B**2 
     &          - 9*htMT2*S2B**4 + 
     &          9*sqrt2*htMT2*mueOS2*pi*S2B**4 + 
     &          72*sqrt2*CB2**3*htMT2*mueOS2*pi*SB2 - 
     &          108*htMT2*S2B**2*SB2 + 36*htMT2*mueOS2*S2B**2*SB2 + 
     &          256*g3MT2*S2B**2*SB2**2 + 
     &          18*sqrt2*htMT2*mueOS2*pi*S2B**2*SB2**2 + 
     &          36*htMT2*(-1 + mueOS2)**2*S2B**2*SB2*log(abs(1 - 
     &          mueOS2))- 
     &          36*htMT2*mueOS**4*S2B**2*SB2*log(mueOS2)))/
     &          (2304.*S2B**2*SB2**2) 
	  
	    else

	       subnonlog2Lb = subnonlog2Lb +
     &          (cL**2*(-1152*htMT**4 - 288*C2B*(gMT2 + gyMT2)*
     &          htMT2 + 336*gMT2*(gMT2 + gyMT2)*
     &          (1 + CB2**2 - (3*S2B**2)/2D0 + SB2**2) - 
     &          8*gMT**4*(37 + 31*(CB2**2 - (3*S2B**2)/2D0 + SB2**2))+ 
     &          3*(gMT**2 + gyMT**2)**2*
     &          (-63 + 3*CB2**4 - 84*CB2**3*SB2 - 52*SB2**2 
     &          + 3*SB2**4 + 
     &          S2B**2*(78 - 21*SB2**2) + CB2**2*(-52 + 210*SB2**2)))*
     &          (-72*CB2*htMT2*S2B**2 + 72*sqrt2*CB2**3*htMT2*pi*SB2 + 
     &          S2B**2*(256*g3MT**2*SB2**2 + 
     &          9*htMT2*((-1 + sqrt2*pi)*S2B**2 + 
     &           2*SB2*(-4 + sqrt2*pi*SB2))))*.5D0*vev**2)/
     &          (2304.*S2B**2*SB2**2)
	    
	  endif
	endif
