#! /bin/bash -x

out=f/MDcorr.F
log=m/MDcorr.log

rm -fr m f
mkdir m f || exit 1

math -run "
	out=\"$out\"
	deb=${DEBUG:-0}
" << \_EOF_ > $log
AppendTo[$Echo, "stdout"];
$Post = LeafCount;

<< FeynArts`

<< FormCalc`

$DebugPre[1] = "#ifdef DETAILED_DEBUG\n";
$DebugCmd[1] = "DPARA \"`1``2` =\", `3` ENDL\n";
$DebugPost[1] = "#endif\n";

Format[Mino3, FortranForm] := "M_3";
Format[Mino3C, FortranForm] := "M_3C";

NClear[];
N[sqrt2] = Sqrt[2.];

SetOptions[InsertFields,
  InsertionLevel -> {Classes},
  ExcludeParticles -> {V, S[4], S[6], S[1], S[2], S[3], S[5]},
  Model -> (*FVMSSM*) MSSMQCD];
(* MSSMQCD because we must have only the TB-enhanced terms *)

InitializeModel[Model /. Options[InsertFields]];

SetOptions[Paint,
  PaintLevel -> Flatten[{InsertionLevel} /. Options[InsertFields]],
  ColumnsXRows -> {3, 4}];

SetOptions[CalcFeynAmp,
  Dimension -> 4];

If[ deb > 0, $SaveSE = "m/"; MkDir[$PaintSE = "d/"] ];


IDelta/: IDelta[i_, j_] a_ := IDelta[i, j] (a /. j -> i) /; !FreeQ[a, j];

Delta[i_, i_] = 1;

simp[x_] := FullSimplify[x /. Delta -> IDelta /. IDelta -> Delta];


SEq[p_, Q_] :=
  SelfEnergy[F[4, {g1}] -> F[4, {g2}], 0, LastSelections -> p] /. {
    B0i[bb0, args__] :> B0q[args, Q],
    B0i[bb1, args__] :> B1q[args, Q] };

self = asdb/Alfas SEq[F[15], Qqcd] +
  adb/Alfa SEq[F[12], Qew] +
  AlfaGF/Alfa SEq[F[11], Qew]

self = self /. IndexDelta -> IDelta /. IDelta -> Delta

secoeff = Thread[Array[se, 3] ->
  SEPart[-{LScalarCoeff[#], LVectorCoeff[#], RVectorCoeff[#]}&, self]]

secoeff >> m/MDcorr.raw;

Mf2[3,3] =.

secoeff = secoeff /. {
  Sqrt[2] -> sqrt2, 1/Sqrt[2] -> 1/sqrt2,
  (*Alfas -> als, Alfa -> al,*)
  MCha -> MChaL, MCha2 -> (MChaL[##]^2 &),
  UCha -> UChaL, UChaC -> UChaLC,
  VCha -> VChaL, VChaC -> VChaLC,
  MNeu -> MNeuL, MNeu2 -> (MNeuL[##]^2 &),
  ZNeu -> ZNeuL, ZNeuC -> ZNeuLC,
  Mf[3,g_] :> Mf[tT,g],
  Mf2[3,g_] :> Mf2[tT,g],
  MSf[s_,3,g__] :> MSf[s,tT,g],
  MSf2[s_,3,g__] :> MSf2[s,tT,g],
  USf[s1_,s2_,3,g__] :> USf[s1,s2,tT,g],
  USfC[s1_,s2_,3,g__] :> USfC[s1,s2,tT,g],
  Mf[4,g_] :> Mf[bTR,g],
  Mf2[4,g_] :> Mf2[bTR,g],
  MSf[s_,4,g__] :> MSdL[s,g],
  MSf2[s_,4,g__] :> MSdL2[s,g],
  USf[s1_,s2_,4,g__] :> USdL[s1,s2,g],
  USfC[s1_,s2_,4,g__] :> USdLC[s1,s2,g]
} /. {
  B0i[bb0, args__] :> B0q[args, Mf2[3,3]],
  B0i[bb1, args__] :> B1q[args, Mf2[3,3]] }

secoeff >> m/MDcorr.simp;


expr = PrepareExpr[ secoeff,
  MakeTmp -> ToVars[_B0q|_B1q, Head],
  (*Expensive -> {_B0q, _B1q},*)
  Optimize -> True,
  FinalTouch -> simp,
  DebugLines -> 1 ]

expr >> m/MDcorr.write;


hh = OpenFortran[out];

WriteString[hh, "\
* " <> FileNameTake[out, -1] <> "\n\
* mass-matrix corrections as in 0907.5408\n\
* generated " <> TimeStamp[] <> "\n\
* this file is part of FeynHiggs\n\n\
#include \"externals.h\"\n\
#include \"types.h\"\n\
#include \"debug.h\"\n\n\n\
\tsubroutine MDcorr(se, g1, g2, asdb, adb, Qqcd, Qew)\n\
\timplicit none\n\
\tComplexType se(3)\n\
\tinteger g1, g2\n\
\tRealType asdb, adb, Qqcd, Qew\n\n\
#include \"FH.h\"\n\
#include \"looptools.h\"\n\n"];

WriteExpr[hh, expr,
  RealArgs -> {B0q, B1q},
  IndexType -> "integer"];

WriteString[hh, "\tend\n"];

Close[hh];

_EOF_

gzip $log

test -f $out

