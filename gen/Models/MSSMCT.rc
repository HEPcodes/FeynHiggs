(* ------------------------ Renormalization constants ---------------------- *)

(* The following SM definitions of renormalization constants are
   for the on-shell renormalization of the MSSM in a scheme
   similar to A. Denner, Fortschr. d. Physik, 41 (1993) 4.

   The MSSM definitions of the renormalization constants 
   (except of the d-type squark sector) can be found in
   Phys. Rev. D 86, 035014 (2012) [arXiv:1111.7289].

   The renormalization constants are not directly used by
   FeynArts, and hence do not restrict the generation of diagrams
   and amplitudes in any way. *)

Clear[RenConst, xHC, xZf1, xZfL1, xZfR1, xZbarfL1, xZbarfR1, xZSf1]

ReDiag = Identity

ReOffDiag = Identity


xHC[Conjugate[mat_[j_, i_]]] := mat[i, j]

xHC[mat_[i_, j_]] := Conjugate[mat[j, i]]

xHC[x_] := Conjugate[x]


xZf1[f_, X_, dm_, s_] :=
Block[ {m = TheMass[f],
        se = ReDiag[SelfEnergy[f]],
        dse = ReDiag[DSelfEnergy[f]]},
  -X[se] - m^2 (LVectorCoeff[dse] + RVectorCoeff[dse]) -
             m (LScalarCoeff[dse] + RScalarCoeff[dse]) +
  s ((LScalarCoeff[se] - dm) - (RScalarCoeff[se] - xHC[dm]))/(2 m)
]

xZfL1[f_, dm_] := xZf1[f, LVectorCoeff, dm, +1]

xZfR1[f_, dm_] := xZf1[f, RVectorCoeff, dm, -1]

xZbarfL1[f_, dm_] := xZf1[f, LVectorCoeff, dm, -1]

xZbarfR1[f_, dm_] := xZf1[f, RVectorCoeff, dm, +1]


xZf1[proc_, m1_, m2_, X_, Y_, SX_, SY_, dm_] :=
Block[ {se = ReOffDiag[SelfEnergy[proc, m2]]},
  2/(m1^2 - m2^2) (m2 (m2 X[se] + m1 Y[se]) +
      m2 (SX[se] - xHC[dm]) + m1 (SY[se] - dm))
]

xZfL1[f1_, f2_, dm_] := xZf1[f2 -> f1, TheMass[f1], TheMass[f2],
  LVectorCoeff, RVectorCoeff, RScalarCoeff, LScalarCoeff, dm]

xZfR1[f1_, f2_, dm_] := xZf1[f2 -> f1, TheMass[f1], TheMass[f2],
  RVectorCoeff, LVectorCoeff, LScalarCoeff, RScalarCoeff, xHC[dm]]

xZbarfL1[f1_, f2_, dm_] := xZf1[f2 -> f1, TheMass[f2], TheMass[f1],
  LVectorCoeff, RVectorCoeff, LScalarCoeff, RScalarCoeff, xHC[dm]]

xZbarfR1[f1_, f2_, dm_] := xZf1[f2 -> f1, TheMass[f2], TheMass[f1],
  RVectorCoeff, LVectorCoeff, RScalarCoeff, LScalarCoeff, dm]


(* ---------------------- SM renormalization constants --------------------- *)

_UVMf1 = Identity

UVMf1[4, 3] = UVDivergentPart

RenConst[dMf1[t_, j1_]] := UVMf1[t, j1][MassRC[F[t, {j1}]]]


RenConst[dZfL1[t_, j1_, j1_]] := xZfL1[F[t, {j1}], 0]

RenConst[dZfR1[t_, j1_, j1_]] := xZfR1[F[t, {j1}], 0]

RenConst[dZbarfL1[t_, j1_, j1_]] := xZbarfL1[F[t, {j1}], 0]

RenConst[dZbarfR1[t_, j1_, j1_]] := xZbarfR1[F[t, {j1}], 0]


RenConst[dZfL1[t_, j1_, j2_]] := xZfL1[F[t, {j1}], F[t, {j2}], 0]

RenConst[dZfR1[t_, j1_, j2_]] := xZfR1[F[t, {j1}], F[t, {j2}], 0]

RenConst[dZbarfL1[t_, j1_, j2_]] := xZbarfL1[F[t, {j1}], F[t, {j2}], 0]

RenConst[dZbarfR1[t_, j1_, j2_]] := xZbarfR1[F[t, {j1}], F[t, {j2}], 0]


(* ------------------------------ Neutrinos -------------------------------- *)

RenConst[dZfL1[1, j1_, j1_]] := FieldRC[F[1, {j1}]][[1]]

RenConst[dZfR1[1, j1_, j1_]] := FieldRC[F[1, {j1}]][[2]]

RenConst[dZbarfL1[1, j1_, j1_]] := dZfL1[1, j1, j1]

RenConst[dZbarfR1[1, j1_, j1_]] := dZfR1[1, j1, j1]


(* ----------------------------- Vector bosons ----------------------------- *)

RenConst[dMZsq1] := MassRC[V[2]]

RenConst[dMWsq1] := MassRC[V[3]]

RenConst[dZAA1] := FieldRC[V[1]]

RenConst[dZAZ1] := FieldRC[V[1], V[2]]

RenConst[dZZA1] := FieldRC[V[2], V[1]]

RenConst[dZZZ1] := -ReDiag[DSelfEnergy[V[2]]]

RenConst[dZW1] := -ReDiag[DSelfEnergy[V[3]]]

RenConst[dZbarW1] := dZW1


(* --------------------------- Goldstone bosons ---------------------------- *)

RenConst[dZG01] := FieldRC[S[4]]

RenConst[dZGp1] := FieldRC[S[6]]


(* -------------------------- Dependent RenConst --------------------------- *)
(* ATTENTION: originally the counterterms have been generated with           *)
(*            SW -> SW - dSW1 instead of SW -> SW + dSW1                     *)
(*            therefore one has now to multiply dSW1 with -1 leading to:     *)
RenConst[dSW1] := CW^2 (dMZsq1/MZ^2 - dMWsq1/MW^2)/(2 SW)

RenConst[dZe1] := (SW/CW dZZA1 - dZAA1)/2


(* ----------------------------- CKM matrix -------------------------------- *)

If[ dCKM1[] =!= 0,
RenConst[dCKM1[j1_, j2_]] := 1/4 Sum[
  (dZfL1[3, j1, gn] - Conjugate[dZfL1[3, gn, j1]]) CKM[gn, j2] -
  CKM[j1, gn] (dZfL1[4, gn, j2] - Conjugate[dZfL1[4, j2, gn]]), {gn, 3} ]
]


(* --------------------- MSSM renormalization constants -------------------- *)


(* ------------------------------- tan(beta) ------------------------------- *)

RenConst[dSB1] := CB^3 dTB1

RenConst[dCB1] := -SB CB^2 dTB1


(* --------------------- Chargino/Neutralino sector ------------------------ *)

RenConst[dMNeuOS1[n_]] :=
  (MNeu[n] LVectorCoeff[#] + LScalarCoeff[#])& @
    ReTilde[SelfEnergy[F[11, {n}]]]

RenConst[dMChaOS1[c_]] :=
  (MCha[c]/2 (LVectorCoeff[#] + RVectorCoeff[#]) + LScalarCoeff[#])& @
    ReTilde[SelfEnergy[F[12, {c}]]]

RenConst[dZNeu1[n_]] :=
  2 CB^2 dTB1 (SB Conjugate[ZNeu[n, 3]] + CB Conjugate[ZNeu[n, 4]]) *
    (MW Conjugate[ZNeu[n, 2]] - MZ SW Conjugate[ZNeu[n, 1]]) +
  (CB Conjugate[ZNeu[n, 3]] - SB Conjugate[ZNeu[n, 4]]) *  
    (Conjugate[ZNeu[n, 1]] (dMZsq1/MZ SW + 2 MZ dSW1) - 
     Conjugate[ZNeu[n, 2]] dMWsq1/MW)

(* ----------------------------- CCN schemes ------------------------------- *)

CCN[n_][dMino11] :=
  ( dMNeuOS1[n] + dZNeu1[n] - Conjugate[ZNeu[n, 2]]^2 dMino21 +
    2 Conjugate[ZNeu[n, 3]] Conjugate[ZNeu[n, 4]] dMUE1 
  )/Conjugate[ZNeu[n, 1]]^2

CCN[n_][dMino21] :=
Block[ {ud, uo, vd, vo, uv, vu}, 
  ud = Conjugate[UCha[1, 1]] Conjugate[UCha[2, 2]];
  uo = Conjugate[UCha[1, 2]] Conjugate[UCha[2, 1]];
  vd = Conjugate[VCha[1, 1]] Conjugate[VCha[2, 2]];
  vo = Conjugate[VCha[1, 2]] Conjugate[VCha[2, 1]];
  uv = (ud - uo) Conjugate[VCha[1, 2]] Conjugate[VCha[2, 2]];
  vu = (vo - vd) Conjugate[UCha[1, 2]] Conjugate[UCha[2, 2]];
  ( Conjugate[UCha[1, 2]] Conjugate[VCha[1, 2]] dMChaOS1[2] -
    Conjugate[UCha[2, 2]] Conjugate[VCha[2, 2]] dMChaOS1[1] +
    Sqrt[2] CB^2 dTB1 MW (CB uv + SB vu) +
    dMWsq1/(Sqrt[2] MW) (SB uv - CB vu)
  )/(uo vo - ud vd)
]

CCN[n_][dMUE1] :=
Block[ {ud, uo, vd, vo, vu, uv},
  ud = Conjugate[UCha[1, 1]] Conjugate[UCha[2, 2]];
  uo = Conjugate[UCha[1, 2]] Conjugate[UCha[2, 1]];
  vd = Conjugate[VCha[1, 1]] Conjugate[VCha[2, 2]];
  vo = Conjugate[VCha[1, 2]] Conjugate[VCha[2, 1]];
  vu = Conjugate[VCha[1, 1]] Conjugate[VCha[2, 1]] (ud - uo);
  uv = Conjugate[UCha[1, 1]] Conjugate[UCha[2, 1]] (vo - vd);
  ( Conjugate[UCha[2, 1]] Conjugate[VCha[2, 1]] dMChaOS1[1] -
    Conjugate[UCha[1, 1]] Conjugate[VCha[1, 1]] dMChaOS1[2] -
    Sqrt[2] CB^2 dTB1 MW (SB vu + CB uv) +
    dMWsq1/(Sqrt[2] MW) (CB vu - SB uv)
  )/(uo vo - ud vd)
]

(* ------------------------------- CNN schemes ----------------------------- *)

ZNeuAx[i_][j_, k_] :=
  Conjugate[ZNeu[k, i]]^2 (dMNeuOS1[j] + dZNeu1[j]) -
  Conjugate[ZNeu[j, i]]^2 (dMNeuOS1[k] + dZNeu1[k])

ZNeuBx[i_][j_, k_] :=
  Conjugate[ZNeu[k, i]]^2 Conjugate[ZNeu[j, 3]] Conjugate[ZNeu[j, 4]] -
  Conjugate[ZNeu[j, i]]^2 Conjugate[ZNeu[k, 3]] Conjugate[ZNeu[k, 4]]

ZNeuCx[j_, k_] :=
  Conjugate[ZNeu[k, 2]]^2 Conjugate[ZNeu[j, 1]]^2 -
  Conjugate[ZNeu[j, 2]]^2 Conjugate[ZNeu[k, 1]]^2

CNN[c_, n__][dMino11] :=
  (ZNeuAx[2][n] + 2 ZNeuBx[2][n] dMUE1)/ZNeuCx[n]

CNN[c_, n__][dMino21] :=
  -(ZNeuAx[1][n] + 2 ZNeuBx[1][n] dMUE1)/ZNeuCx[n]

CNN[c_, n__][dMUE1] :=
Block[ {u1v1, u1v2, u2v1, u2v2},
   u1v1 = Conjugate[UCha[c, 1]] Conjugate[VCha[c, 1]];
   u1v2 = Conjugate[UCha[c, 1]] Conjugate[VCha[c, 2]];
   u2v1 = Conjugate[UCha[c, 2]] Conjugate[VCha[c, 1]];
   u2v2 = Conjugate[UCha[c, 2]] Conjugate[VCha[c, 2]];
   ( u1v1 ZNeuAx[1][n] +
     ZNeuCx[n] (dMChaOS1[c] -
       Sqrt[2] CB^2 dTB1 MW (CB u1v2 - SB u2v1) -
       dMWsq1/(Sqrt[2] MW) (SB u1v2 + CB u2v1))
   )/(ZNeuCx[n] u2v2 - 2 ZNeuBx[1][n] u1v1)
]


RenConst[dMino11] = $InoScheme /. s:_CCN | _CNN -> s[dMino11]

RenConst[dMino21] = $InoScheme /. s:_CCN | _CNN -> s[dMino21]

RenConst[dMUE1] = $InoScheme /. s:_CCN | _CNN -> s[dMUE1]


(* V^* dX^T U^+ *)
RenConst[dMCha1[i_, j_]] :=
  Array[Conjugate[VCha[i, #]]&, 2] .
  {{dMino21, Sqrt[2] (CB dMWsq1/(2 MW) - CB^2 SB MW dTB1)}, 
   {Sqrt[2] (SB dMWsq1/(2 MW) + CB^3 MW dTB1), dMUE1}} .
  Array[Conjugate[UCha[j, #]]&, 2]


RenConst[dMNeu1[i_, j_]] := dMNeu1[j, i] /; i > j

RenConst[dMNeu1[i_, j_]] :=
Block[ {m13, m14, m23, m24},
  m13 = -MZ CB dSW1 - SW CB dMZsq1/(2 MZ) + MZ SW CB^2 SB dTB1; 
  m14 =  MZ SB dSW1 + SW SB dMZsq1/(2 MZ) + MZ SW CB^2 CB dTB1; 
  m23 =  CB dMWsq1/(2 MW) - MW CB^2 SB dTB1; 
  m24 = -SB dMWsq1/(2 MW) - MW CB^2 CB dTB1; 
  Array[Conjugate[ZNeu[i, #]]&, 4] .
  {{dMino11, 0, m13, m14},
   {0, dMino21, m23, m24},
   {m13, m23, 0, -dMUE1},
   {m14, m24, -dMUE1, 0}} .
  Array[Conjugate[ZNeu[j, #]]&, 4]
]


RenConst[dZfL1[12, c1_, c1_]] := xZfL1[F[12, {c1}], dMCha1[c1, c1]]

RenConst[dZfR1[12, c1_, c1_]] := xZfR1[F[12, {c1}], dMCha1[c1, c1]]

RenConst[dZbarfL1[12, c1_, c1_]] := xZbarfL1[F[12, {c1}], dMCha1[c1, c1]]

RenConst[dZbarfR1[12, c1_, c1_]] := xZbarfR1[F[12, {c1}], dMCha1[c1, c1]]


RenConst[dZfL1[12, c1_, c2_]] :=
  xZfL1[F[12, {c1}], F[12, {c2}], dMCha1[c1, c2]]

RenConst[dZfR1[12, c1_, c2_]] :=
  xZfR1[F[12, {c1}], F[12, {c2}], dMCha1[c1, c2]]

RenConst[dZbarfL1[12, c1_, c2_]] :=
  xZbarfL1[F[12, {c1}], F[12, {c2}], dMCha1[c1, c2]]

RenConst[dZbarfR1[12, c1_, c2_]] :=
  xZbarfR1[F[12, {c1}], F[12, {c2}], dMCha1[c1, c2]]


RenConst[dZfL1[11, n1_, n1_]] := xZfL1[F[11, {n1}], dMNeu1[n1, n1]]

RenConst[dZfR1[11, n1_, n1_]] := xZfR1[F[11, {n1}], dMNeu1[n1, n1]]

RenConst[dZbarfL1[11, n1_, n1_]] := dZfR1[11, n1, n1]

RenConst[dZbarfR1[11, n1_, n1_]] := dZfL1[11, n1, n1]


RenConst[dZfL1[11, n1_, n2_]] :=
  xZfL1[F[11, {n1}], F[11, {n2}], dMNeu1[n1, n2]]

RenConst[dZfR1[11, n1_, n2_]] :=
  xZfR1[F[11, {n1}], F[11, {n2}], dMNeu1[n1, n2]]

RenConst[dZbarfL1[11, n1_, n2_]] := dZfR1[11, n2, n1]

RenConst[dZbarfR1[11, n1_, n2_]] := dZfL1[11, n2, n1]


(* --------------------------- Sfermion sector ----------------------------- *)

USf2[t_, g_][i__][j__] := USf[t, g][i] Conjugate[USf[t, g][j]]

RenConst[dMsq11Sf1[2, j1_]] :=
  dMSfsq1[1, 1, 1, j1] +
  2 TheMass[F[2, {j1}]] dMf1[2, j1] -
  C2B dMWsq1 + 4 MW^2 CB^3 SB dTB1

RenConst[dMsq11Sf1[4, j1_]] :=
  Abs[USf[3, j1][1, 1]]^2 dMSfsq1[1, 1, 3, j1] +
  Abs[USf[3, j1][1, 2]]^2 dMSfsq1[2, 2, 3, j1] -
  2 Re[USf2[3, j1][2, 2][1, 2] dMSfsq1[1, 2, 3, j1]] -
  2 TheMass[F[3, {j1}]] dMf1[3, j1] +
  2 TheMass[F[4, {j1}]] dMf1[4, j1] -
  C2B dMWsq1 + 4 MW^2 CB^3 SB dTB1

RenConst[dMsq12Sf1[4, j1_]] :=
  (Conjugate[Af[4, j1, j1]] - MUE TB) dMf1[4, j1] +
  (Conjugate[dAf1[4, j1, j1]] - dMUE1 TB - MUE dTB1) TheMass[F[4, {j1}]]


DR[_][dMSfsq1[1, 2, 4, j1_]] :=
  ( USf2[4, j1][1, 1][2, 1] (dMSfsq1[1, 1, 4, j1] - dMSfsq1[2, 2, 4, j1]) +
    USf2[4, j1][1, 1][2, 2] dMsq12Sf1[4, j1] -
    USf2[4, j1][1, 2][2, 1] Conjugate[dMsq12Sf1[4, j1]]
  )/(Abs[USf[4, j1][1, 1]]^2 - Abs[USf[4, j1][1, 2]]^2)

DR[_][dMSfsq1[2, 1, 4, j1_]] := Conjugate[dMSfsq1[1, 2, 4, j1]]

DR[s2_][dMSfsq1[s1_, s1_, 4, j1_]] :=
  ( Abs[USf[4, j1][1, s2]]^2 dMSfsq1[s2, s2, 4, j1] +
    (s2 - s1) (2 Re[USf2[4, j1][1, 1][1, 2] dMsq12Sf1[4, j1]] +
      (Abs[USf[4, j1][1, 1]]^2 - Abs[USf[4, j1][1, 2]]^2) dMsq11Sf1[4, j1])
  )/Abs[USf[4, j1][1, s1]]^2 /; s1 =!= s2

DR[_][dMSfsq1[s2_, s2_, t_, j1_]] :=
  MassRC[S[t + 10, {s2, j1}], S[t + 10, {s2, j1}]]


OS[s2_][dMSfsq1[s1_, s1_, t_, j1_]] :=
  ( -Abs[USf[t, j1][1, s2]]^2 dMSfsq1[s2, s2, t, j1] +
    2 Re[USf2[t, j1][2, 2][1, 2] dMSfsq1[1, 2, t, j1]] +
    dMsq11Sf1[t, j1]
  )/Abs[USf[t, j1][1, s1]]^2 /; s1 =!= s2

OS[_][dMSfsq1[s1_, s2_, t_, j1_]] :=
  MassRC[S[t + 10, {s1, j1}], S[t + 10, {s2, j1}]]


RenConst[dMSfsq1[1, 1, 1, j1_]] := MassRC[S[11, {j1}]]

RenConst[dMSfsq1[s1_, s2_, 3, j1_]] :=
  MassRC[S[13, {s1, j1}], S[13, {s2, j1}]]

RenConst[dMSfsq1[s1_, s2_, t:2|4, j1_]] :=
  $SfScheme[t, j1] /. s:_OS | _DR :> s[dMSfsq1[s1, s2, t, j1]]


RenConst[dZSf1[1, 1, 1, j1_]] := -ReDiag[DSelfEnergy[S[11, {j1}]]]

RenConst[dZSf1[s1_, s1_, t_, j1_]] := -ReDiag[DSelfEnergy[S[t + 10, {s1, j1}]]]

RenConst[dZbarSf1[s1_, s1_, t_, j1_]] := dZSf1[s1, s1, t, j1]


xZSf1[s1_, s2_, t_, j1_][os_] :=
Block[ {sf1 = S[t + 10, {s1, j1}], sf2 = S[t + 10, {s2, j1}]},
  2/(TheMass[sf1]^2 - TheMass[sf2]^2) (
    ReOffDiag[SelfEnergy[sf2 -> sf1, TheMass[S[t + 10, {os, j1}]]]] -
    dMSfsq1[s1, s2, t, j1] )
]

RenConst[dZSf1[1, 2, t_, j1_]] := xZSf1[1, 2, t, j1][2]

RenConst[dZSf1[2, 1, t_, j1_]] := xZSf1[2, 1, t, j1][1]

RenConst[dZbarSf1[1, 2, t_, j1_]] := -xZSf1[2, 1, t, j1][2]

RenConst[dZbarSf1[2, 1, t_, j1_]] := -xZSf1[1, 2, t, j1][1]


DR[_][dAf1[4, j1_, j1_]] :=
Block[ {dMSd1sq, dMSd2sq, dYd, dMUEdr},
  dMSd1sq = MassRC[S[14, {1, j1}]];
  dMSd2sq = MassRC[S[14, {2, j1}]];
  dYd = MassRC[S[14, {1, j1}], S[14, {2, j1}]];
  dMUEdr = RenConst[dMUE1] //. {
    d:_dMChaOS1 | _dMNeuOS1 | dMWsq1 | dMZsq1 :> UVDivergentPart[RenConst[d]],
    d:dSW1 | _dZNeu1 :> RenConst[d] };
  UVDivergentPart[
    ( USf2[4, j1][1, 1][1, 2] (dMSd1sq - dMSd2sq) +
      USf2[4, j1][1, 1][2, 2] Conjugate[dYd] +
      USf2[4, j1][2, 1][1, 2] dYd -
      (Af[4, j1, j1] - Conjugate[MUE] TB) RenConst[dMf1[4, j1]]
    )/TheMass[F[4, {j1}]]
  ] + Conjugate[dMUEdr] TB + Conjugate[MUE] dTB1
]

OS[_][dAf1[t:2|4, j1_, j1_]] :=
  ( USf2[t, j1][1, 1][1, 2] (dMSfsq1[1, 1, t, j1] - dMSfsq1[2, 2, t, j1]) +
    USf2[t, j1][1, 1][2, 2] Conjugate[dMSfsq1[1, 2, t, j1]] +
    USf2[t, j1][2, 1][1, 2] dMSfsq1[1, 2, t, j1] -
    (Af[t, j1, j1] - Conjugate[MUE] TB) dMf1[t, j1]
  )/TheMass[F[t, {j1}]] +
  Conjugate[dMUE1] TB + Conjugate[MUE] dTB1


RenConst[dAf1[3, j1_, j1_]] :=
  ( USf2[3, j1][1, 1][1, 2] (dMSfsq1[1, 1, 3, j1] - dMSfsq1[2, 2, 3, j1]) +
    USf2[3, j1][1, 1][2, 2] Conjugate[dMSfsq1[1, 2, 3, j1]] +
    USf2[3, j1][2, 1][1, 2] dMSfsq1[1, 2, 3, j1] -
    (Af[3, j1, j1] - Conjugate[MUE]/TB) dMf1[3, j1]
  )/TheMass[F[3, {j1}]] +
  Conjugate[dMUE1]/TB - Conjugate[MUE] dTB1/TB^2

RenConst[dAf1[4, j1_, j1_]] := $SfScheme[4, j1] /.
  s:_OS | _DR :> s[dAf1[4, j1, j1]]

RenConst[dAf1[t_, j1_, j1_]] = OS[-1][dAf1[t, j1, j1]]


(* --------------------------------- SQCD ---------------------------------- *)

RenConst[dMGl1] := MassRC[F[15]] SqrtEGl^2

RenConst[dZGlL1] := xZfL1[F[15], 0]

RenConst[dZGlR1] := xZfR1[F[15], 0]

RenConst[dZbarGlL1] := dZGlR1

RenConst[dZbarGlR1] := dZGlL1

RenConst[dZGG1] := UVDivergentPart[FieldRC[V[5]]]

RenConst[dZgs1] := dZGG1/2


General::badscheme = "Illegal scheme choice ``."

s_DR[___] := (Message[DR::badscheme, s]; Abort[])

s_OS[___] := (Message[OS::badscheme, s]; Abort[])

s_CCN[___] := (Message[CCN::badscheme, s]; Abort[])

s_CNN[___] := (Message[CNN::badscheme, s]; Abort[])

