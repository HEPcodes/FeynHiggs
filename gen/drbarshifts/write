#! /bin/bash -x
shopt -s nullglob

in=m/simp.m
test -f $in || exit 1
mkdir -p f || exit 1
out=f/DRbar2LShifts.F
log=m/write.log
rm -f $out $log*

math -run "
	in=\"$in\"
	out=\"$out\"
" << \_EOF_ > $log
AppendTo[$Echo, "stdout"];

mod = "gl";
<< packages/fafc.m;
<< packages/MUERules.m;

expr = Get[in];

$DebugPre[1] = "#ifdef DETAILED_DEBUG\n";
$DebugCmd[1] := "DHIGGS \"`1``2` =\", `3` ENDL\n";
$DebugPost[1] = "#endif\n";

Enum["h0h0", "HHHH", "A0A0", "HmHp", "h0HH", "h0A0", "HHA0"];

u2pre = {
  (u:U2s1|U2s2|U2c1|U2c2|U2c1C|U2c2C)[t_, Xt + Yt] :> u[t, Xt] + u[t, Yt],
  (u:U2s1|U2s2|U2c1|U2c2|U2c1C|U2c2C)[t_, -Xt - Yt] :> -u[t, Xt] - u[t, Yt] };

u2sub = {
  U2s1[3,x_] :> USt2s1[x],
  U2s2[3,x_] :> USt2s2[x],
  U2c1[3,x_] :> USt2c1[x],
  U2c2[3,x_] :> USt2c2[x],
  U2c1C[3,x_] :> USt2c1C[x],
  U2c2C[3,x_] :> USt2c2C[x],
  U2s1[4,x_] :> USb2s1[x],
  U2s2[4,x_] :> USb2s2[x],
  U2c1[4,x_] :> USb2c1[x],
  U2c2[4,x_] :> USb2c2[x],
  U2c1C[4,x_] :> USb2c1C[x],
  U2c2C[4,x_] :> USb2c2C[x] };

u2s = {
  USt2s1[Xtgl] -> USt2s1Xt, USt2s2[Xtgl] -> USt2s2Xt,
  USt2s1[Ytgl] -> USt2s1Yt, USt2s2[Ytgl] -> USt2s2Yt,
  USb2s1[Xbgl] -> USb2s1Xb, USb2s2[Xbgl] -> USb2s2Xb, 
  USb2s1[Ybgl] -> USb2s1Yb, USb2s2[Ybgl] -> USb2s2Yb };

u2c = {
  USt2c1[Xtgl] -> USt2c1Xt, USt2c2[Xtgl] -> USt2c2Xt, 
  USt2c1[Ytgl] -> USt2c1Yt, USt2c2[Ytgl] -> USt2c2Yt,
  USb2c1[Xbgl] -> USb2c1Xb, USb2c2[Xbgl] -> USb2c2Xb, 
  USb2c1[Ybgl] -> USb2c1Yb, USb2c2[Ybgl] -> USb2c2Yb };

u2cC = {
  USt2c1C[Xtgl] -> USt2c1XtC, USt2c2C[Xtgl] -> USt2c2XtC, 
  USt2c1C[Ytgl] -> USt2c1YtC, USt2c2C[Ytgl] -> USt2c2YtC,
  USb2c1C[Xbgl] -> USb2c1XbC, USb2c2C[Xbgl] -> USb2c2XbC, 
  USb2c1C[Ybgl] -> USb2c1YbC, USb2c2C[Ybgl] -> USb2c2YbC };

expr = Get[in];

expr = sfsimp[mod][expr] //. u2pre /. u2sub /.
  Join[u2s, u2c, u2cC];

Mf2[tM1,3] = MTgl2;
Mf[tM1,3] = MTgl;
Mf2[bM1,3] = MBgl2;
Mf[bM1,3] = MBgl;

expr = expr /. {A0[m_] :> A0q[m, Q2], B0[m__] :> B0q[m, Q2], B1[m__] :> B1q[m, Q2]};

expr = expr /. (Conjugate[dMSfsq1[1,2,t_,g_]] -> x_) :> (dMSfsq1[2,1,t,g] -> x);

expr = PrepareExpr[expr,
  MakeTmp -> (Flatten[{
    "#include \"U2.h\"\n\n",
    Reverse/@ Join[u2s, u2c],
    MapThread[
      "#define " <> ToString[#1] <> " Conjugate(" <> ToString[#2] <> ")\n" &,
      Map[Last, {u2cC, u2c}, {2}]] <> "\n",
    ToVars[_A0q|_B0q|_B1q, Head][#],
    "\tend\n"
  }]&)
];

expr >> m/write.m;

hh = OpenFortran[out];

WriteString[hh, "\
* DRbar2LShifts.h\n\
* compute the shifts at 2L level due to DRbar parameters\n\
* generated " <> TimeStamp[] <> "\n\
* this file is part of FeynHiggs\n\
* please do not edit directly\n\n\
#include \"externals.h\"\n\
#include \"types.h\"\n\
#include \"debug.h\"\n\n\n\
\tsubroutine DRbar2LShifts(shift, Q2)\n\
\timplicit none\n\
\tRealType Q2\n\n\
#include \"FH.h\"\n\
#include \"looptools.h\"\n\n"];

WriteExpr[hh, expr,
  Type -> "ComplexType",
  RealArgs -> {A0q, B0q, B1q}];

Close[hh];

_EOF_

gzip $log

test -f $out

