Mathematica 9.0 for Linux x86 (64-bit)
Copyright 1988-2013 Wolfram Research, Inc.

In[1]:= 
In[2]:= In[2]:= << FeynArts`
FeynArts 3.9
by Hagen Eck, Sepp Kueblbeck, and Thomas Hahn
last revised 10 Apr 14

In[3]:= In[3]:= << FormCalc`
FormCalc 8.4
by Thomas Hahn
last revised 29 Apr 14

In[4]:= In[4]:= Alfa = Alfa1L;
In[5]:= EL = EL1L;
In[6]:= EL1L/: EL1L^2 := 4 Pi Alfa1L;
In[7]:= In[7]:= Mf[3,g_] := Mf[tM1,g];
In[8]:= Mf2[3,g_] := Mf2[tM1,g];
In[9]:= Mf[4,g_] := Mf[bX,g];
In[10]:= Mf2[4,g_] := Mf2[bX,g];
In[11]:= Mfy[4,g_] := Mf[bX,g];
In[12]:= Mfy2[4,g_] := Mf2[bX,g];
In[13]:= Mdy[g_] := Mf[bX,g];
In[14]:= Sq[Mfy[a__]] = Mfy2[a];
In[15]:= In[15]:= sfrulz[t_, ty_] = {
  MSf[s_,t,g_] -> MSf[s,ty,g],
  MSf2[s_,t,g_] -> MSf2[s,ty,g],
  USf[s1_,s2_,t,g_] -> USf[s1,s2,ty,g],
  USfC[s1_,s2_,t,g_] -> USfC[s1,s2,ty,g],
  MASf[as_,t] -> MASf[as,ty],
  MASf2[as_,t] -> MASf2[as,ty],
  UASf[as1_,as2_,t] -> UASf[as1,as2,ty],
  UASfC[as1_,as2_,t] -> UASfC[as1,as2,ty],
  Kf[g__,t] -> Kf[g,ty],
  KfC[g__,t] -> KfC[g,ty]
};
In[16]:= In[16]:= $DebugCmd = {"#ifdef DETAILED_DEBUG\n", "#endif\n", "DHIGGS ", " ENDL"};
In[17]:= In[17]:= NClear[];
In[18]:= N[sqrt2] = Sqrt[2.];
In[19]:= In[19]:= Finite = 1;
In[20]:= In[20]:= Attributes[paint] = {HoldFirst};
In[21]:= In[21]:= paint[ins_] := Paint[ ins,
  PaintLevel -> {Classes},
  ColumnsXRows -> {3, 4},
  DisplayFunction -> (Export[
    "!gzip -c > " <> StringReplace[file,
      ".F" -> "-" <> Block[{ins}, ToString[ins]] <> ".ps.gz"],
    #, "PS", ImageSize -> 144 {3, 4} ]&)
] /; debug === 1;
In[22]:= In[22]:= In[22]:= Derivative[1, 0, 0][B0] = DB0;
In[23]:= Derivative[1, 0, 0][B1] = DB1;
In[24]:= Derivative[1, 0, 0][B11] = DB11;
In[25]:= Derivative[1, 0, 0][B00] = DB00;
In[26]:= In[26]:= loopint = _A0 | _B0 | _B1 | _B00 | _B11 | _DB0 | _DB1 | _DB00 | _DB11;
In[27]:= In[27]:= simp[x_] := FullSimplify[Factor[Collect[x, loopint, simp2]]] /.
  plus -> Plus //. a_ b_. + a_ c_ -> a (b + c);
In[28]:= In[28]:= simp2[x_] := FullSimplify[x] /. -1 + SBA2 -> -CBA2 /. Plus -> plus;
In[29]:= In[29]:= In[29]:= SetOptions[WriteExpr,
  Newline -> "\n",
  TmpType -> "ComplexType"];
In[30]:= In[30]:= SetOptions[PrepareExpr,
  FinalTouch -> simp,
  (*MinLeafCount -> 1,*)
  Optimize -> True,
  Expensive -> List@@ loopint,
  DebugLines -> True];
In[31]:= In[31]:= In[31]:= tops[_ -> {}] := CreateTopologies[1, 1 -> 0];
In[32]:= tops[_] := CreateTopologies[1, 1 -> 1,
  ExcludeTopologies -> Tadpoles];
In[33]:= In[33]:= In[33]:= calc[process_, {args_, deriv_}, foo_] :=
Block[ {charged, top, tst, bsb, lsl, all, rem, res},
  Run["rm -f", file <> "*"];

  top = tops[process];

  InitializeModel[Model /. Options[InsertFields]];
  charged = !SelfConjugate[ process[[1]] ];

  If[ charged,
    bsb = InsertFields[top, process,
      LastSelections -> F[3|4] | S[13|14]];
    paint[bsb];
    tst = Head[bsb][],
  (* else *)
    tst = InsertFields[top, process, 
      LastSelections -> F[3] | S[13],
      ExcludeParticles -> {F[4], S[14]}];
    paint[tst];
    bsb = InsertFields[top, process,
      LastSelections -> F[4] | S[14]];
    paint[bsb]
  ];

  lsl = InsertFields[top, process,
    LastSelections -> F[1|2] | S[11|12]];
  paint[lsl];

  all = InsertFields[top, process];
  paint[all];

  rem = DiagramComplement[all, tst, bsb, lsl];
  paint[rem];

  amps = CreateFeynAmp/@ {tst, bsb, lsl, rem};
  If[ debug === 1, Put[amps, file <> ".amp"] ];

  res = CalcFeynAmp[amps, Transverse -> False,
    OnShell -> False, Dimension -> 4];
  res = Apply[List, res, 1] //. Join[Subexpr[], Abbr[]] /. ToOldBRules /.
    { Pair[_k, _k] -> k2,
      Pair[_e | _ec, _k] -> If[MatchQ[process, _V -> _V], 0, 1],
      Pair[_e, _ec] -> -1 } /.
    sfrulz[3, tM1] /.
    sfrulz[4, bX] /.
    { CKM[a__] -> CKMin[a],
      CKMC[a__] -> CKMinC[a] } /.
    USf[a__] USfC[a__] -> USf2[a];

  If[ charged,
    res[[1]] = res[[2]] /. {(Mf|Mf2)[bX, _] -> 0, (Kf|KfC)[__, bX] -> 0};
    res[[2]] = Simplify[ res[[2]] - res[[1]] ] ];

  res = deriv[simp/@ res];
  If[ debug === 1, Put[res, file <> ".m"] ];

  res = res /. {
    Mino3 -> "M_3", Mino3C -> "M_3C",
    IndexDelta -> Delta,
    Sqrt[2] -> sqrt2, 1/Sqrt[2] -> 1/sqrt2 };

  hh = OpenFortran[file];

  WriteString[hh, "\
* " <> foo <> ".F\n\
* generated " <> TimeStamp[] <> "\n\
* this file is part of FeynHiggs\n\
* please do not edit directly\n\n\
#include \"externals.h\"\n\
#include \"types.h\"\n\n\n\
\tComplexType function " <> ToFortran[foo@@ Flatten[{args, bX}]] <> "\n\
\timplicit none\n\
\tinteger bX\n" <>
    ("\tRealType " <> # <> "\n" &)/@ args <> "\n\
#include \"FH.h\"\n\
#include \"looptools.h\"\n\n" <>
    VarDecl[
      Cases[res, SumOver[i_, _] -> i, Infinity] //Union,
      "integer"] <> "\n"];

  gen3only = {
    SumOver[i_, 3] :> SumOver[i, gM, 3] /;
      !StringMatchQ[ToString[i], "Ind*"],
    SumOver[i_, 6] -> SumOver[i, 1, 6, gM] };

  WriteExpr[hh, {
    foo -> res[[1]] /. gen3only,
    "\tif( mssmpart .le. 1 ) return\n",
    RuleAdd[foo, res[[2]]] /. gen3only,
    "\tif( mssmpart .le. 2 ) return\n",
    RuleAdd[foo, res[[3]]],
    "\tif( mssmpart .le. 3 ) return\n",
    RuleAdd[foo, res[[4]]],
    "\tend\n"
  }];

  Close[hh];
]
In[34]:= In[34]:= In[34]:= fi["h0h0"] := S[1] -> S[1];
In[35]:= fi["h0HH"] := S[1] -> S[2];
In[36]:= fi["h0A0"] := S[1] -> S[3];
In[37]:= fi["h0G0"] := S[1] -> S[4];
In[38]:= fi["HHHH"] := S[2] -> S[2];
In[39]:= fi["HHA0"] := S[2] -> S[3];
In[40]:= fi["HHG0"] := S[2] -> S[4];
In[41]:= fi["A0A0"] := S[3] -> S[3];
In[42]:= fi["A0Z"]  := S[3] -> V[2];
In[43]:= fi["A0G0"] := S[3] -> S[4];
In[44]:= fi["G0G0"] := S[4] -> S[4];
In[45]:= fi["HmHp"] := S[5] -> S[5];
In[46]:= fi["HmGp"] := S[5] -> S[6];
In[47]:= fi["GmGp"] := S[6] -> S[6];
In[48]:= fi["WW"]   := V[3] -> V[3];
In[49]:= fi["ZZ"]   := V[2] -> V[2];
In[50]:= fi["h0"]   := S[1] -> {};
In[51]:= fi["HH"]   := S[2] -> {};
In[52]:= fi["A0"]   := S[3] -> {};
In[53]:= _fi := Abort[];
In[54]:= In[54]:= In[54]:= td := {{}, Identity};
In[55]:= se := {{"k2"}, Identity};
In[56]:= dse := {{"k2"}, D[#, k2]&};
In[57]:= In[57]:= In[57]:= $FV = {11, 12, 13, 14}
Out[57]= {11, 12, 13, 14}

In[58]:= In[58]:= fvmod["f-nmfv"] = "FV";
In[59]:= _fvmod = Sequence[];
In[60]:= In[60]:= In[60]:= self[file_] := (
  MkDir[#1];
  SetOptions[InsertFields, Model -> {"MSSMQCD", fvmod[#1], "EnhHbb"}];
  calc[fi[#3], ToExpression[#2], #2 <> "_" <> #3]
)& @@ StringSplit[file, {"/", "_", "."}];
In[61]:= In[61]:= In[61]:= self[file];
loading generic model file /home/pcl301/hahn/FeynArts/Models/Lorentz.gen
> $GenericMixing is OFF
generic model {Lorentz} initialized

loading classes model file /home/pcl301/hahn/FeynArts/Models/MSSMQCD.mod
  loading classes model file /home/pcl301/hahn/FeynArts/Models/MSSM.mod
loading classes model file /home/pcl301/hahn/FeynArts/Models/FV.mod

$FV = {11, 12, 13, 14}

loading classes model file /home/pcl301/hahn/fh-2a/gen/oneloop/EnhHbb.mod
> 63 particles (incl. antiparticles) in 26 classes
> $CounterTerms are ON
> 403 vertices
classes model {MSSMQCD, FV, EnhHbb} initialized

Excluding 0 Generic, 4 Classes, and 8 Particles fields

inserting at level(s) {Generic, Classes}
> Top. 1: 1 Generic, 1 Classes insertions
> Top. 2: 2 Generic, 2 Classes insertions

Restoring 0 Generic, 4 Classes, and 8 Particles fields
in total: 3 Generic, 3 Classes insertions

inserting at level(s) {Generic, Classes}
> Top. 1: 1 Generic, 1 Classes insertions
> Top. 2: 2 Generic, 2 Classes insertions
in total: 3 Generic, 3 Classes insertions

inserting at level(s) {Generic, Classes}
> Top. 1: 1 Generic, 2 Classes insertions
> Top. 2: 2 Generic, 4 Classes insertions
in total: 3 Generic, 6 Classes insertions

inserting at level(s) {Generic, Classes}
> Top. 1: 2 Generic, 11 Classes insertions
> Top. 2: 5 Generic, 23 Classes insertions
in total: 7 Generic, 34 Classes insertions

creating amplitudes at level(s) {Generic, Classes}
> Top. 1: 1 Generic, 1 Classes amplitudes
> Top. 2: 2 Generic, 2 Classes amplitudes
in total: 3 Generic, 3 Classes amplitudes

creating amplitudes at level(s) {Generic, Classes}
> Top. 1: 1 Generic, 1 Classes amplitudes
> Top. 2: 2 Generic, 2 Classes amplitudes
in total: 3 Generic, 3 Classes amplitudes

creating amplitudes at level(s) {Generic, Classes}
> Top. 1: 1 Generic, 2 Classes amplitudes
> Top. 2: 2 Generic, 4 Classes amplitudes
in total: 3 Generic, 6 Classes amplitudes

creating amplitudes at level(s) {Generic, Classes}
> Top. 1: 2 Generic, 7 Classes amplitudes
> Top. 2: 5 Generic, 15 Classes amplitudes
in total: 7 Generic, 22 Classes amplitudes

preparing FORM code in /home/pcl301/hahn/fh-2a/gen/oneloop/fc-amp-1.frm
running FORM... ok

preparing FORM code in /home/pcl301/hahn/fh-2a/gen/oneloop/fc-amp-1.frm
running FORM... ok

preparing FORM code in /home/pcl301/hahn/fh-2a/gen/oneloop/fc-amp-1.frm
running FORM... ok

preparing FORM code in /home/pcl301/hahn/fh-2a/gen/oneloop/fc-amp-1.frm
running FORM... ok

In[62]:= In[62]:= 
