#! /bin/bash -x
shopt -s nullglob

test $# -ne 1 && {
  cat << _EOF_
Usage:  $0 {mfv,nmfv,gl}
generates the subroutine for calculation of RCs
_EOF_
  exit 1
}

mod="$1"
printf -v ctin ',"%s"' m/$mod/*/se_{A0A0,HmHp,h0h0,HHHH,h0HH,h0A0,HHA0,G0G0,h0G0,HHG0,A0G0,GmGp,HmGp}_$mod.ct
test -z "$ctin" && {
  cat << _EOF_
No counterterm files found
_EOF_
  exit 1
}
name="CalcSE_$mod"
file="m/$mod/$name"
rm -f "$file"*

math -run "
	mod = \"$mod\";
	name = \"$name\";
	file = \"$file\";
	ctin = {${ctin:1}};
" << \_EOF_ > "$file.log"
AppendTo[$Echo, "stdout"];

<< packages/fafc.m;

Scan[(N[#] = Random[])&, {EL1L, CW, SW, MZ}];

$DebugPre[1] = "#ifdef DETAILED_DEBUG\n";
$DebugCmd[1] := "DHIGGS \"`1``2` =\", `3` ENDL\n";
$DebugPost[1] = "#endif\n";


seVar[1, "dse", p_, 0] := -seVar[1, "dZ", p];
seVar[_, v_, p_, m___] :=
Block[ {n = lookup[p], vn},
  vn = ToSymbol[v, n];
  call[vn] = Call[(v <> "_" <> n <> "_" <> mod)[AddrOf[vn], m]];
  vn
];

Attributes[seCall] = {HoldAll};
seCall[SelfEnergy[p:(_ -> {}), ___], __] := seVar[uv, "td", p];
seCall[SelfEnergy[p_, ___], _, _ -> m_] := seVar[uv, "se", p, m];
seCall[DSelfEnergy[p_, ___], _, _ -> m_] := seVar[uv, "dse", p, m];

uv = 0;
Attributes[uvPart] = {HoldAll};
uvPart[x_] := Block[{uv = 1}, x]

calcRC[rc_, ct_] :=
Block[ {ReTilde = Re, UVDivergentPart = uvPart, SEHook = seCall, call, defs, ctr},
  ctr = Reverse/@ ct;
  defs = (#1 -> (#2 /. ctr))&@@@ Flatten[List@@@ CalcRenConst[rc]];
  Put[defs, file <> ".rc" <> If[TrueQ[$MHpInput], "Hp", "A0"]];
  { (#[[1,1,1]] -> #[[2]])&/@ DownValues[call],
    Block[#, Set@@@ defs; ct]& @ Union[Replace[First/@ defs, h_[___] :> h, 1]] }
];


ct = Flatten[Transpose[Get/@ ctin]];
rc = Flatten[List@@@ FindRenConst[ct]];

Put[ct, file <> ".ct"];


modopt[mod, $MHpInput -> True];
{seHp, rcHp} = calcRC[rc, ct];
modopt[mod, $MHpInput -> False];
{seA0, rcA0} = calcRC[rc, ct];

rcCat[se_, rc_] :=
Block[ {ij, hH},
  {ij, hH} = GatherBy[rc, MatchQ[#, _["h0h0"|"HHHH"|"h0HH"] -> _]&];
  hH = MoveDepsLeft[hH, se, ij][[1]];
  ij = MoveDepsLeft[ij, se][[1]];
  {GatherBy[hH, FreeQ[#, Call]&], GatherBy[ij, FreeQ[#, Call]&]}
];

rcIf[xHp_, xA0_] :=
Block[ {xCom = Select[xHp, MemberQ[xA0, #]&]},
  {xCom, Select[xHp, !MemberQ[xCom, #]&], Select[xA0, !MemberQ[xCom, #]&]}
];

rcExpr[{seCom_, seHp_, seA0_}, {rcCom_, rcHp_, rcA0_}] := Flatten[{
  seCom,
  IndexIf[ inputmass == A0A0,
    OnePassOrder[Flatten[{seA0, rcA0}]],
    OnePassOrder[Flatten[{seHp, rcHp}]] ],
  rcCom }];

{hHHp, ijHp} = rcCat[seHp, rcHp];
{hHA0, ijA0} = rcCat[seA0, rcA0];

fexpr = {
  bM1 -> bMps,
  rcExpr@@ MapThread[rcIf, {hHHp, hHA0}],
  bM1 -> bM,
  rcExpr@@ MapThread[rcIf, {ijHp, ijA0}] };

Put[fexpr, file <> ".rc.m"];


{ij, hH} = GatherBy[
  (StringSplit[#, "_"][[2]] -> #)&/@ FileBaseName/@ ctin,
  MatchQ[#, _["h0h0"|"HHHH"|"h0HH", _]]& ];

xcall[i_ -> full_] := {
  p2 -> P2[i],
  IndexIf[SETest["key", i], {
    se -> Call[full[AddrOf[se], p2]],
    "SEu"[i, se],
    "SEr"[i, se] }],
  IndexIf[SETest["dkey", i], {
    se -> Call[("d" <> full)[AddrOf[se], p2]],
    "DSEu"[i, se],
    "DSEr"[i, se] }]
}

secall = Flatten[{bM1 -> bMps, xcall/@ hH, bM1 -> bM, xcall/@ ij}];

Put[secall, file <> ".se.m"];


N[fac] = Random[];
Format[fac, FortranForm] := HoldForm[EL1L/(2 MW SW)];

fexpr = PrepareExpr[fexpr /. EL1L -> fac (2 CW SW MZ), 
  Optimize -> False,
  DebugLines -> False ];

fexpr = CodeExpr[{}, Join[DeleteCases[#1, _[__] | bM1], #2], ##3]&@@ fexpr;


hh = OpenFortran[file <> ".h"];

WriteString[hh, "\
* " <> name <> ".h\n\
* generated " <> TimeStamp[] <> "\n\
* this file is part of FeynHiggs\n\
* please do not edit directly\n\n\n\
\tsubroutine CalcSE_" <> mod <> "(onshell, key, dkey)\n\
\timplicit none\n\
\tinteger onshell, key, dkey\n\n\
#include \"FH.h\"\n\n\
\tRealType p2\n\
\tComplexType se\n\n"];

WriteExpr[hh, {secall, "\tend\n"},
  Newline -> If[$IndexIf == 0, "\n", ""],
  DebugLines -> 0];

WriteString[hh, "\n\n\
************************************************************************\n\n\
\tsubroutine CalcRC_" <> mod <> "\n\
\timplicit none\n\n\
#include \"FH.h\"\n\
#include \"looptools.h\"\n\n"];

WriteExpr[hh, {fexpr, "\tend\n"} /. {dMsq1 -> "dMsq1_", dZ1 -> "dZ1_"},
  RealArgs -> _String,
  Optimize -> False,
  DebugLines -> 0];

Close[hh];

_EOF_

gzip "$file.log"

test -f "$file.h"

