################ input parameters for sector decomposition #################
#
# ############### all lines beginning with # are comments ##################
#---------------------------------------------------------------------------
# insert subdirectory for the mathematica output files (will be created if 
# non-existent): if not specified, a directory with the name of the graph 
# given below will be created by default
subdir=2loop
#---------------------------------------------------------------------------
# if outputdir is not specified: default directory for 
# the output will have integral name (given below) appended to directory 
# above, otherwise specify full path for Mathematica output files here
outputdir=
#---------------------------------------------------------------------------
# graphname (can contain underscores, numbers, but should not contain commas)
graph=P126_Loop
#---------------------------------------------------------------------------
# number of propagators:
propagators=6
#---------------------------------------------------------------------------
# number of external legs:
legs=3
#---------------------------------------------------------------------------
# number of loops:
loops=2
#---------------------------------------------------------------------------
# construct integrand (F and U) via topological cuts (only possible for 
# scalar integrals), default is 0 (no cut construction used),
# use cutconstruct=1 for more effective treatment of hexagons
cutconstruct=1
############################################################################
# parameters for subtractions and epsilon expansion
############################################################################
# epsord: level up to which expansion in eps is desired 
# (default is epsord=0: Laurent series is cut after finite part eps^0)
# series will be calculated from eps^(-maxpole) to eps^epsord
# note that epsord is negative if only some pole coeffs are required
epsord=0
#---------------------------------------------------------------------------
#  flag for prefactor: 
#  '0': default prefactor (-1)^Nn*Gamma[Nn-Nloops*Dim/2] is factored out of 
#  	the numerical result
#  '1': default prefactor (-1)^Nn*Gamma[Nn-Nloops*Dim/2] included in 
#  	numerical result
#  '2': give desired prefactor to be factored out (in Mathematica syntax) 
#  	below
prefactorflag=2
#---------------------------------------------------------------------------
# if option 2 has been chosen above: prefactor in Mathematica syntax,
# in combination with options 0 or 1 above this entry will be ignored
# NB use Nn, Nloops, Dim to denote number of propagators, loops, and 
# dimension (4-2eps by default)
prefactor=-Exp[-2 EulerGamma *eps] 
#---------------------------------------------------------------------------
# flag to use integration by parts (IBP) to deal with numerical instability 
# in functions with many subtractions. '0' for never, '1' for always, '2' 
# for a mixed approach. '2' is designed to use IBP when it is more efficient
# to do so, and not otherwise. Note that using IBP can increase considerably
# the number of functions to be integrated
IBPflag=0
############################################################################
# parameters for the numerical integration
############################################################################
# Fortran compiler (tested with gfortran, ifort, g77), default is gfortran
compiler=
#---------------------------------------------------------------------------
# flag to decide at which stage the program terminates: ('exe flag')
# 0 - the iterated sector decomposition is done and 
#      the scripts to do the subtraction and epsilon expansion and 
#      to create the fortran files and to launch the numerical integration
#      are created (scripts batch* in graph subdirectory)  but not run 
#      (useful if a cluster is available to run each pole structure on a 
#       different node)
# 1 - the subtraction and epsilon expansion are performed, and the 
#      resulting functions are written to fortran files 
# 2 - all the files needed for the numerical integration are created
# 3 - compilation is launched to make the executables 
# 4 - the executables are run, either by batch submission or locally
exeflag=4
#---------------------------------------------------------------------------
# flag for job submission: 0: single machine, 1: cluster (batch system to 
# submit jobs)
clusterflag=0
#---------------------------------------------------------------------------
# if using a cluster: flag to use the default batch setup (0) or a 
# user-defined setup (1)
batchsystem=0
#---------------------------------------------------------------------------
# if using a cluster: maximum number of jobs allowed in the queue
maxjobs=50
#---------------------------------------------------------------------------
# estimated maximal CPU time (in hours), (used to send to a particular
# queue on a batch system, otherwise not important)
maxcput=4
#---------------------------------------------------------------------------
# name of the point to calculate (should be either blank or a string, 
# useful to label the result files in case of different choices for the
# Mandelstam variables, masses etc.)
pointname=p_
#---------------------------------------------------------------------------
# values for Mandelstam invariants sij=(p_i+p_j)^2 in numbers
# sij should be <=0 in Euclidean region
# for N=5 the ordering is s12,s23,s34,s45,s51
# for N=6 the ordering is s12,s23,s34,s45,s56,s61,s123,s156,s126
# for N<5 the ordering is s12,s23,s13
# length of list below can be larger than number of invariants actually 
# present in the integrand; additional values will be ignored
sij=9.0
#---------------------------------------------------------------------------
# off-shell legs p1^2,p2^2,...
#pi^2 = (should be <=0 in Euclidean region !!!)
pi2=0., 0., 9.0
#---------------------------------------------------------------------------
# propagator masses m1^2,m2^2,... (should be >=0)
# mi^2 = ms[i] = 
ms2=1.0
#---------------------------------------------------------------------------
# Numerical integrator to use:
# 0=BASES,>0=>CUBA, 1=Vegas,2=Suave,3=Divonne(default),4=Cuhre,5=Mathematica
integrator=3
#---------------------------------------------------------------------------
# path for Cuba library
# leave blank for default path =  ../Cuba-3.2, otherwise give full path
cubapath=
######################### Cuba parameters ##################################
# maximum number of function evaluations for leading pole, subleading pole,...
maxeval=350000000,350000000,350000000
#---------------------------------------------------------------------------
# minimum number of function evaluations for leading pole, subleading pole,...
mineval=0,0,0
#---------------------------------------------------------------------------
# relative accuraccy required (as decimal) for leading pole, subleading pole,...
epsrel=1.e-2,1.e-2,1.e-2
#---------------------------------------------------------------------------
# absolute accuraccy required (as decimal) for leading pole, subleading pole,...
epsabs=1.e-4,1.e-4,1.e-4
#---------------------------------------------------------------------------
# flag for Cuba (encodes verbosity, how samples are used, and how random 
# numbers are generated)
cubaflags=2
#---------------------------------------------------------------------------
####################### Vegas specific parameters ##########################
# number of function evaluations on the first iteration
nstart=1000,1000,1000
#---------------------------------------------------------------------------
# number of extra function evaluations per iteration
nincrease=400,400,400
#---------------------------------------------------------------------------
####################### Suave specific parameters ##########################
# number of new integrand evaluations in each subdivision
nnew=10000,10000,10000
#---------------------------------------------------------------------------
# measure of how 'flat' the function to evaluate is
flatness=1d0,1d0,1d0
#---------------------------------------------------------------------------
####################### Divonne specific parameters ########################
# determines sampling in partitioning phase
key1=1500,1500,2000
#---------------------------------------------------------------------------
# determines sampling in final integration phase
key2=1,1,1
#---------------------------------------------------------------------------
# sets strategy for refinement phase
key3=1,1,1
#---------------------------------------------------------------------------
# controls thoroughness of partitioning phase, (essentially the number of
# 'saftey' iterations performed before a partition is accepted)
maxpass=4,4,4
#---------------------------------------------------------------------------
# the width of the border of the integration region functions which cannot
# be evaluated on the border (most functions in secdec) need a non-zero 
# border function values in this region are extrapolated from inside the 
# integration region
border=1.e-6,1.e-6,1.e-6
#---------------------------------------------------------------------------
# maximum chi squared value a single subregion is allowed to have in the 
# final integration phase
maxchisq=0.9,0.9,0.9
#---------------------------------------------------------------------------
# minimum deviation (as decimal) of the requested error of the entire 
# integral which determines whether it is worthwhile further examining a
# region which failed chi squared test
mindeviation=.15e0,.15e0,.15e0
#---------------------------------------------------------------------------
################## Cuhre specific parameters ###############################
# chooses basic integration rule for leading pole, subleading pole,...
key=7,7,7
#---------------------------------------------------------------------------
# ################### BASES parameters ##################################
# path to library for numerical integration (BASES library)
# leave blank for default path =  SecDec/basesv5.1, otherwise give full path
basespath=
#---------------------------------------------------------------------------
# ncall  (number of Monte Carlo points) for leading pole, subleading pole,...
ncall=1000000,1200000,1500000
#---------------------------------------------------------------------------
# relative accuracy (as %) for Monte Carlo grid construction for 
# leading pole, subleading pole,...
acc1=.01,.01,.01
#---------------------------------------------------------------------------
# relative accuracy (as %) for final Monte Carlo integration step for 
# leading pole, subleading pole,...
acc2=.01,.01,.01
#---------------------------------------------------------------------------
# number of iterations for grid step for leading pole, subleading pole,...
iter1=10,10,10
#---------------------------------------------------------------------------
# number of iterations for integration step for leading pole, subleading pole,...
iter2=10,10,10
#---------------------------------------------------------------------------
############################################################################
# advanced options
############################################################################
# list of primary sectors to be treated:
# (if blank, default all, i.e. 1 to number of propagators, will be taken), 
# useful if a diagram has symmetries such that some primary sectors yield 
# the same
primarysectors=
#---------------------------------------------------------------------------
# multiplicities of the primary sectors listed above
# (list multiplicities in same order as corresponding sectors above)
# if blank, default multiplicities (=one) are set automatically
multiplicities=
#---------------------------------------------------------------------------
# list of primary sectors to be redone differently because they lead to 
# infinite recursion must be empty for default strategy to be applied
infinitesectors=
#---------------------------------------------------------------------------
# flag to integrate subsets of functions for each pole order separately or
# to sum all functions for a certain pole order and then integrate
# integrate and then sum: 0
# sum and then integrate: 1
# flag=1 will allow cancellations between different functions and thus give 
# a more realistic error, but should not be used for complicated diagrams
# where the individual functions are large already
togetherflag=0
#---------------------------------------------------------------------------
# editor to display numerical result
# if blank, result will not be automatically displayed in an editor window
editor=none
#---------------------------------------------------------------------------
# the maximum size in bytes of the fortran/C++ functions to be grouped 
# together for integration, max possible value is usually 2000000 but 
# dependent on CPU power
grouping=500000
#---------------------------------------------------------------------------
# language of the files for numerical evaluation; Cpp (for C++, default) 
# and fortran are possible, a deformation of the contour is only possible
# with Cpp
language=Cpp
#---------------------------------------------------------------------------
# switch on the rescaling of invariants by setting rescale=1 or off 
# (rescale=0), default is 0
rescale=0
#---------------------------------------------------------------------------
################CONTOUR DEFORMATION PARAMETERS##############################
# contour deformation or calculation in Euclidean space (True/False, 
# default is False)
contourdef=True
#---------------------------------------------------------------------------
# choose an initial contour deformation parameter lambda
# note that lambda > 1 can be chosen, the program will automatically 
# decrease lambda if it is found to be non-optimal
lambda=4.0
#---------------------------------------------------------------------------
# for experts only:
# set the number of evaluations done to determine the optimal lambda 
# (default is 4000). Change this number only in case you really know why you 
# want to do it. Increasing the value slows down the initial part of one 
# integration (bad if you need to integrate many functions), decreasing it 
# might produce an erroneous lambda.
optlamevals=5000
#---------------------------------------------------------------------------
# if the integrand's external particles have masses, switch on smalldefs=1 
# (default is 0), this will minimize the deformation of the contour
smalldefs=0
#---------------------------------------------------------------------------
# if the integrand has massless external particles only, switch on 
# largedefs=1 (default is 0), 
# this will maximize the deformation of the contour
largedefs=0
